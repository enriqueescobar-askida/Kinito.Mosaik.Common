using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.IO;

/*
 Simple client for connecting to the LW translation server.  

 Compilation instructions:
 
 1. Use the wsdl.exe tool to generate the client stubs from the interface description file 
    LWQueue.wsdl.
 2. Move the file LWQueue.cs generated by wsdl into the same example directory. 
    Make sure that the Visual Studio is able to locate and open that file.
 3. Make sure that a correct language pair is specified in TranslationContext.
 4. Compile the project.
 5. Execute the example.
 */

/// <summary>
/// This class use web service of language weaver to create a client side application.
/// 
/// </summary>

public class LWTRANSLI
{

    private LWQueue _server;

    // Server URL. Please change to match your actual configuration
    // First, please connect to  "http://moon.dyndns.org:8082/Translation"

    private const String SERVER_URL = "http://moon.dyndns.org:4640";

    public LWTRANSLI()
    {
        _server = new LWQueue();
        _server.Url = SERVER_URL;
    }

    // Translates a file   
    public int translate_File(String filename, String fileType, String encoding, String srcLang, String tgtLang, String user, Boolean unknown)
    {
        // Read the content of the file in a buffer
        FileStream file = new FileStream(filename, FileMode.Open);
        byte[] buffer = new byte[file.Length];
        file.Read(buffer, 0, buffer.Length);


        JobParam param = new JobParam();
        // Setting the title is optional
        param.title = filename;
        param.user = user;


        TranslationContext context = new TranslationContext();
        // Setting language pair is mandatory
        context.sourceLangId = srcLang;
        context.targetLangId = tgtLang;
        context.inputFormat = fileType;
        // If the encoding is not specified, the server will attempt 
        // to detect it for text files
        context.encoding = encoding;

        // Create a translation job using the content of the buffer
        int jobID = _server.createJob(param, context, buffer);

        file.Close();
        return jobID;
    }



    // Translates URL
    public int translate_url(String url, String srcLang, String tgtLang, String user, Boolean unknown)
    {
        JobParam param = new JobParam();
        // Setting the title is optional
        param.title = url;
        param.url = url;
        param.user = user;

        TranslationContext context = new TranslationContext();
        // Setting language pair is mandatory
        context.sourceLangId = srcLang;
        context.targetLangId = tgtLang;
        context.inputFormat = "text/html";
        context.showUnknown = unknown;

        // createJob requires a text argument, even when translating a URL
        byte[] buffer = new byte[0];

        // Create a translation job using the content of the buffer
        int jobID = _server.createJob(param, context, buffer);
        return jobID;
    }



    // Retrieves a specific translation and writes it to a file
    public void receive(String filename, int jobID)
    {
        JobHeader header;
        JobState state;
        int offset = 0;

        if (File.Exists(filename))
            File.Delete(filename);
        FileStream file = new FileStream(filename, FileMode.Create, FileAccess.ReadWrite);

        for (; ; )
        {
            // receive status of translation
            header = _server.getJobStatus(jobID);

            if (header != null)
            {
                state = header.state;              
            }
            else
            {
                // the job has been removed from the queue
                break;
            }

            if (state == JobState.FAILED)
            {
                // Translation has failed
                break;
            }
            else if (state == JobState.TERMINATED)
            {
                // Translation has been terminated
                break;
            }

            byte[] buffer = _server.readJob(
                jobID,    // job id
                offset,   // how many bytes to skip
                100000,   // maximum number of bytes to return
                true      // wait until translation is available
                );

            if (buffer != null && buffer.Length > 0)
            {
                offset += buffer.Length; // advance the offset
                // you can show progress  of traslation by buffer.Length  bytes received
                file.Write(buffer, 0, buffer.Length);
            }
            else if (state == JobState.DONE)
            {
                // Finished retrieving the translation.
                break;
            }
        }
        file.Close();

    }

    // remove a job
    public void removeJobs(int jobId)
    {
        _server.removeJob(jobId);
    }

    // remove job related to user
    public void removeJobUser(string user, int jobId)
    {
        JobHeader header;
        JobState state;
        header = _server.getJobStatus(jobId);
        if (header != null)
        {
           state = header.state;
           if (header.jobParam.user.Equals(user))
              _server.removeJob(jobId);
        }

    }


    // Shows the elements of a JobHeader
    public String printJobHeader(JobHeader header)
    {
        String Output = " User " + header.jobParam.user
        + "  JobID: " + header.jobId
        + "  State: " + header.state.ToString()
        + "  Progress: " + header.progress
        + "  Rate: " + header.rate
        + "  Prio: " + header.jobParam.prio
        + header.jobParam.user
        + "  Title: " + header.jobParam.title;
        return Output;
    }



}
